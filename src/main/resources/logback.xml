<!-- scan 是否定期扫描xml文件， scanPeriod是说扫描周期是30秒-->
<configuration scan="true" scanPeriod="30 seconds" debug="false" packagingData="true">
    <!-- 项目名称 -->
    <contextName>LearnLogback</contextName>
    <!-- 属性 -->
    <property name="USER_HOME" value="./log"/>

    <!-- Insert the current time formatted as "yyyyMMdd'T'HHmmss" under
       the key "bySecond" into the logger context. This value will be
       available to all subsequent configuration elements. -->
    <timestamp key="bySecond" datePattern="yyyyMMdd" timeReference="contextBirth"/>

    <!-- appender很重要，一个配置文件会有多个appender -->
    <!-- ConsoleApperder意思是从console中打印出来 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 过滤器，一个appender可以有多个 -->
        <!-- 阈值过滤，就是log行为级别过滤，debug及debug以上的信息会被打印出来 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>

        <!-- encoders are assigned the type
             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
        <!-- encoder编码规则 -->
        <encoder>
            <!--<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>-->
            <!--<pattern>%d %contextName %msg%n</pattern>-->
            <!-- pattern模式 %d时间 %thread 线程名 %level行为级别 %logger logger名称 %method 方法名称 %message 调用方法的入参消息 -->
            <pattern>%-4d [%thread] %highlight%-5level %cyan%logger.%-10method - %message%n</pattern>
        </encoder>
    </appender>

    <!-- FileAppender 输出到文件 -->
    <!--<appender name="FILE" class="ch.qos.logback.core.FileAppender">-->
        <!--&lt;!&ndash; 文件存放位置 %{xxx} 就是之前定义的属性xxx &ndash;&gt;-->
        <!--<file>${USER_HOME}/myApp1log-${bySecond}.log</file>-->

        <!--<encoder>-->
            <!--&lt;!&ndash; %date和%d是一个意思 %file是所在文件 %line是所在行 &ndash;&gt;-->
            <!--<pattern>%date %level [%thread] %logger{30} [%file:%line] %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->

    <!-- name意思是这个logger管的哪一片，像下面这个管的就是log/test包下的所有文件 level是只展示什么行为信息级别以上的，类似阈值过滤器 additivity表示是否再抛出事件，就是说如果有一个logger的name是log，如果这个属性是true，另一个logger就会在这个logger处理完后接着继续处理 -->
    <!--<logger name="com.ingbyr.log" level="DEBUG" additivity="false">-->
        <!--&lt;!&ndash; 连接输出源，也就是上边那几个输出源 ，你可以随便选几个appender&ndash;&gt;-->
        <!--<appender-ref ref="STDOUT"/>-->
        <!--<appender-ref ref="FILE"/>-->
    <!--</logger>-->

    <!-- 这就是上边logger没有管到的情况下 root默认接管所有logger -->
    <root level="debug">
        <appender-ref ref="STDOUT"/>
    </root>
</configuration>